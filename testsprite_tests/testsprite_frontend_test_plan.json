[
  {
    "id": "TC001",
    "title": "Admin login with valid credentials",
    "description": "Verify that the admin can log in successfully with valid username and password.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to admin login page"
      },
      {
        "type": "action",
        "description": "Enter valid username and password"
      },
      {
        "type": "action",
        "description": "Click login button"
      },
      {
        "type": "assertion",
        "description": "Verify admin is redirected to admin panel with access granted"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Admin login with invalid credentials",
    "description": "Verify that admin login fails when using invalid username or password and proper error message is shown.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to admin login page"
      },
      {
        "type": "action",
        "description": "Enter invalid username and/or password"
      },
      {
        "type": "action",
        "description": "Click login button"
      },
      {
        "type": "assertion",
        "description": "Verify login is rejected and error message displayed"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Manual quiz question addition by admin",
    "description": "Ensure the admin can manually add a quiz question with all required fields and it is correctly saved.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as admin and navigate to question management"
      },
      {
        "type": "action",
        "description": "Input valid question text, options, and correct answer"
      },
      {
        "type": "action",
        "description": "Submit the new question"
      },
      {
        "type": "assertion",
        "description": "Verify question is added and visible in question list"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Bulk quiz question upload via Excel with valid file",
    "description": "Verify that uploading a well-formed Excel file where questions are correctly formatted results in successful addition of all questions.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as admin and navigate to bulk upload section"
      },
      {
        "type": "action",
        "description": "Upload a valid Excel file containing formatted quiz questions"
      },
      {
        "type": "assertion",
        "description": "Verify file is accepted, processed asynchronously, and questions are correctly added"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Bulk quiz question upload via Excel with invalid file format",
    "description": "Ensure that uploading an invalid or corrupted Excel file results in proper validation errors and no questions are added.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as admin and navigate to bulk upload section"
      },
      {
        "type": "action",
        "description": "Upload an Excel file with invalid format, missing fields, or corrupted content"
      },
      {
        "type": "assertion",
        "description": "Verify error message is shown and no questions are added"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Server health check API returns expected response",
    "description": "Verify that the backend server health check RESTful API responds with correct status and information.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to health check API endpoint"
      },
      {
        "type": "assertion",
        "description": "Verify response status is 200 and contains valid server health data"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Quiz Host starts a sequential game and question flows correctly",
    "description": "Ensure the Quiz Host can start a sequential quiz game, questions are delivered in order, timer counts down correctly, and progression moves forwards.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as Quiz Host and select sequential game mode"
      },
      {
        "type": "action",
        "description": "Start the quiz game"
      },
      {
        "type": "assertion",
        "description": "Verify first question is broadcast to players with timers starting"
      },
      {
        "type": "action",
        "description": "Advance through all questions manually or by timer expiry"
      },
      {
        "type": "assertion",
        "description": "Verify questions appear in correct order and timing is maintained"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Quiz Host starts a random game and question flow is randomized",
    "description": "Verify that starting a game in random mode causes questions to be delivered in a non-deterministic order to players.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Login as Quiz Host and select random game mode"
      },
      {
        "type": "action",
        "description": "Start the quiz game"
      },
      {
        "type": "assertion",
        "description": "Verify questions are delivered in random order to players"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Players join game by scanning QR code",
    "description": "Ensure that players scanning QR code receive the correct game join link and successfully join the game lobby.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Quiz Host generates and displays QR code"
      },
      {
        "type": "action",
        "description": "Player scans QR code using mobile device or equivalent"
      },
      {
        "type": "action",
        "description": "Access link encoded in QR code and submit player name to join game"
      },
      {
        "type": "assertion",
        "description": "Verify player joins game lobby and is listed among current participants"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Player joins game manually via code and enters name",
    "description": "Verify a player can join an ongoing game by manually entering game code and player name correctly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to player interface"
      },
      {
        "type": "action",
        "description": "Manually enter valid game join code"
      },
      {
        "type": "action",
        "description": "Enter player name and confirm join"
      },
      {
        "type": "assertion",
        "description": "Player enters game lobby successfully and waits for quiz start"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Player receives questions in real-time and submits answers",
    "description": "Confirm that players receive quiz questions instantly via Socket.IO events, can select answer choices and submit them successfully.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Player joins a running quiz game"
      },
      {
        "type": "assertion",
        "description": "Verify player receives question in real-time"
      },
      {
        "type": "action",
        "description": "Select an answer choice and submit"
      },
      {
        "type": "assertion",
        "description": "Verify answer submission acknowledged and recorded"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Player receives live score and ranking updates",
    "description": "Ensure players see accurate and timely score and ranking updates during the quiz game as scores are calculated.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Participate in quiz game and submit answers"
      },
      {
        "type": "assertion",
        "description": "Verify live score and ranking updates are received and displayed promptly after each question"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Player answer submission after timer expiry is rejected",
    "description": "Verify that if a player attempts to submit an answer after the question timer has expired, the submission is rejected and an appropriate message is shown.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Join quiz game and wait for a question"
      },
      {
        "type": "action",
        "description": "Wait until question timer expires"
      },
      {
        "type": "action",
        "description": "Attempt to submit an answer"
      },
      {
        "type": "assertion",
        "description": "Verify answer is rejected and player is notified about the late submission"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Player connection loss and reconnection",
    "description": "Test that when a player loses connection temporarily during an active quiz, they can reconnect automatically or manually and resume the game state without data loss.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Player joins quiz and answers some questions"
      },
      {
        "type": "action",
        "description": "Simulate network disconnection for the player"
      },
      {
        "type": "assertion",
        "description": "Verify UI shows connection lost message"
      },
      {
        "type": "action",
        "description": "Restore network connection or reconnect manually"
      },
      {
        "type": "assertion",
        "description": "Verify player rejoins game and receives current question and score"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Admin panel user access restriction enforcement",
    "description": "Ensure that access to the admin panel is restricted only to authenticated and authorized users and unauthorized users cannot access or perform admin actions.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access admin panel URL without login"
      },
      {
        "type": "assertion",
        "description": "Verify redirection to login screen or access denied message"
      },
      {
        "type": "action",
        "description": "Login as non-admin user if possible"
      },
      {
        "type": "assertion",
        "description": "Verify access to admin functions is denied"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Excel file upload API returns proper error for unsupported file types",
    "description": "Verify that attempting to upload non-Excel files or unsupported formats is rejected by the backend with meaningful error messages.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Login as admin and upload a non-Excel file (e.g., .txt, .pdf)"
      },
      {
        "type": "assertion",
        "description": "Verify backend rejects the upload with status code 400 and descriptive error"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "QR code correctly encodes game join link",
    "description": "Test that the generated QR code encodes a valid game join URL which when decoded is accurate and allows player joining.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Start a game as Quiz Host and generate QR code"
      },
      {
        "type": "action",
        "description": "Decode QR code using third-party scanner"
      },
      {
        "type": "assertion",
        "description": "Verify decoded link is a valid game join URL and accessible via player interface"
      }
    ]
  },
  {
    "id": "TC018",
    "title": "RESTful API returns correct questions list",
    "description": "Verify that the REST API endpoint for retrieving quiz questions returns accurate and complete question data in expected format.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to questions API endpoint"
      },
      {
        "type": "assertion",
        "description": "Verify response contains correct list of questions with expected fields (text, options, correct answer)"
      }
    ]
  },
  {
    "id": "TC019",
    "title": "UI responsive design and styling consistency",
    "description": "Ensure that the application UI components render correctly and maintain consistent layout, gradient and glassmorphism effects across various device screen sizes.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open admin panel, quiz host, and player views on desktop, tablet, and mobile device screen resolutions"
      },
      {
        "type": "assertion",
        "description": "Verify UI elements adjust responsively, styling effects like gradients and glassmorphism are correctly applied and visuals are consistent"
      }
    ]
  },
  {
    "id": "TC020",
    "title": "Real-time game events are broadcast to all clients timely",
    "description": "Verify that Socket.IO events for player joins, question deliveries, answer confirmations, and score updates are properly emitted and received on all relevant clients without significant delay.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Start a quiz game with multiple connected players"
      },
      {
        "type": "assertion",
        "description": "Verify real-time propagation of events including player joining, question start, answer submission acknowledgement, and score updates to clients"
      }
    ]
  }
]
